import LS.HasFibers
import Mathlib.CategoryTheory.Sites.Grothendieck

/-!

# Fibered categories

This file defines the fibered category associated to a sheaf.

## Implementation


## References
[Vistoli2008] "Notes on Grothendieck Topologies, Fibered Categories and Descent Theory" by Angelo Vistoli
-/

universe u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ w

open CategoryTheory Functor Category Fibered Opposite

variable {ùíÆ : Type u‚ÇÅ} {A : Type u‚ÇÇ} [Category ùíÆ] [Category A] (F : ùíÆ·µí·µñ ‚•§ Type u‚ÇÉ)

def ‚Ñ± := (S : ùíÆ) √ó (F.obj (op S))

instance : Category (‚Ñ± F) where
  Hom X Y := X.1 ‚ü∂ Y.1
  id X := ùüô X.1
  comp f g := f ‚â´ g

def ‚Ñ±.œÄ (F : ùíÆ·µí·µñ ‚•§ Type u‚ÇÉ) : ‚Ñ± F ‚•§ ùíÆ :=
  { obj := Œª X => X.1,
    map := @Œª X Y f => f }

lemma ‚Ñ±.mk_hom {R S : ùíÆ} (f : R ‚ü∂ S) {X Y : ‚Ñ± F} (hX : X.1 = R)
    (hY : Y.1 = S) : X ‚ü∂ Y := by subst hX; subst hY; exact f

lemma ‚Ñ±.IsHomLift_self {X Y : ‚Ñ± F} (f : X ‚ü∂ Y) : IsHomLift (‚Ñ±.œÄ F) f f where
  ObjLiftDomain := rfl
  ObjLiftCodomain := rfl
  HomLift := ‚ü®by simp only [eqToHom_refl, comp_id, id_comp]; rfl‚ü©

instance : IsFibered (‚Ñ±.œÄ F) where
  has_pullbacks := by
    intros X R S hS f
    subst hS
    let Y : ‚Ñ± F := ‚ü®R, (F.map (op f)) X.2‚ü©
    use Y, (f : Y ‚ü∂ X)
    exact {
      ObjLiftDomain := rfl
      ObjLiftCodomain := rfl
      HomLift := ‚ü®by simp only [eqToHom_refl, comp_id, id_comp]; rfl‚ü©
      UniversalProperty := by
        intro T Z g h w œÜ' hœÜ'
        have := hœÜ'.1
        subst this
        use g
        refine ‚ü®‚ü®?_, ?_‚ü©, ?_‚ü©
        -- TODO: extract this somehow
        exact {
          ObjLiftDomain := rfl
          ObjLiftCodomain := rfl
          HomLift := ‚ü®by simp only [eqToHom_refl, comp_id, id_comp]; rfl‚ü©
        }
        have := hœÜ'.3.1
        simp at this
        rw [‚Üêthis] at w
        exact w.symm

        intro œà hœà
        have := hœà.1.3.1
        simp at this
        rw [‚Üêthis]
        rfl
    }

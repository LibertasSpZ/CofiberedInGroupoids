import Mathlib.CategoryTheory.Functor.Category
import Mathlib.Algebra.Algebra.Subalgebra.Basic
import Mathlib.Algebra.FreeAlgebra
import Mathlib.Algebra.Category.Ring.Basic
import Mathlib.Algebra.Category.ModuleCat.Basic
import Mathlib.RingTheory.Artinian
import Mathlib.CategoryTheory.CommSq
import Mathlib.RingTheory.PrincipalIdealDomain
import Mathlib.LinearAlgebra.Quotient
import Mathlib.Algebra.Module.Torsion
import Mathlib.RingTheory.Ideal.LocalRing

universe u v w w'

open  LocalRing RingHom Ideal Submodule RingHom

section

open CategoryTheory

variable (R : Type w) [CommRing R] (k : Type w') [Field k] (œÄ : R ‚Üí k)

structure LocalArtinAlgebraWithFixedResidueCat where
  carrier : Type v
  [isCommRing : CommRing carrier]
  [isAlgebra : Algebra R carrier]
  [isArtin : IsArtinian carrier carrier]
  [isLocal : LocalRing carrier]
  (res : carrier ‚ß∏ (maximalIdeal carrier) ‚âÉ+* k)
  (h :  œÄ = comp (res : carrier ‚ß∏ (maximalIdeal carrier) ‚Üí+* k)
    (algebraMap R (carrier ‚ß∏ (maximalIdeal carrier))))

-- set_option hygiene false in 
local notation " ùî∏ R k œÄ " => LocalArtinAlgebraWithFixedResidueCat R k œÄ

attribute [instance] LocalArtinAlgebraWithFixedResidueCat.isCommRing
  LocalArtinAlgebraWithFixedResidueCat.isAlgebra LocalArtinAlgebraWithFixedResidueCat.isLocal

instance : CoeSort (ùî∏ R k œÄ) (Type v) := ‚ü®LocalArtinAlgebraWithFixedResidueCat.carrier‚ü©

attribute [coe] LocalArtinAlgebraWithFixedResidueCat.carrier

-- variable (A : Art R k œÄ)

--instance : Semiring A := A.isCommRing.toSemiring

def LocalArtinAlgebraWithFixedResidue.proj (A : ùî∏) : A ‚Üí+* k := comp A.res (Ideal.Quotient.mk (maximalIdeal A))

/- def LocalArtinAlgebraWithFixedResidueHoms (A B : LocalArtinAlgebraWithFixedResidueCat R k œÄ) : Type :=
  {f : A ‚Üí‚Çê[R] B // IsLocalRingHom (f : A ‚Üí+* B) ‚àß
    (comp (LocalArtinAlgebraWithFixedResidue.proj R k œÄ B) f) =
      LocalArtinAlgebraWithFixedResidue.proj R k œÄ A} -/



variable (A B C : ùî∏)

structure LocalArtinAlgebraWithFixedResidueHoms where
  func : A ‚Üí‚Çê[R] B
  (isLocal : true)
  (h : true)

infixr:25 " ‚Üí‚Çó+* " => LocalArtinAlgebraWithFixedResidueHoms

instance : Coe (A ‚Üí‚Çó+* B) (A ‚Üí‚Çê[R] B) := ‚ü®LocalArtinAlgebraWithFixedResidueHoms.func‚ü©

attribute [coe] LocalArtinAlgebraWithFixedResidueHoms.func

namespace LocalArtinAlgebraWithFixedResidueHoms

def comp {A B C : LocalArtinAlgebraWithFixedResidueCat R k œÄ}
  (f : A ‚Üí‚Çó+* B) (g : B ‚Üí‚Çó+* C) : A ‚Üí‚Çó+* C :=
‚ü®AlgHom.comp (g : B ‚Üí‚Çê[R] C) f, sorry, sorry‚ü©

def id {A : Art R k œÄ} : A ‚Üí‚Çó+* A := ‚ü®by { haveI := A.isAlgebra ; convert @AlgHom.id R A.carrier _ _ this }, 
 IsLocalRingHom.Id A, sorry‚ü©

end LocalArtinAlgebraWithFixedResidueHoms

initialize_simps_projections LocalArtinAlgebraWithFixedResidueCat (-isCommRing, -isAlgebra)

instance: CategoryTheory.Category (LocalArtinAlgebraWithFixedResidueCat R k œÄ) where
  Hom A B := A ‚Üí‚Çó+* B
  id A := ‚ü®AlgHom.id R A, sorry, sorry‚ü©
  comp f g := f.comp g

def small_extension (f : A ‚Üí+* B) : Prop :=
  (ker f) * (maximalIdeal A) = ‚ä• ‚àß (ker f : Submodule A A).IsPrincipal ‚àß
    (Function.Surjective f)



/- #check Submodule.mkQ

lemma temp : Module.IsTorsionBySet A
  ((maximalIdeal A ) ‚ß∏ (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2))) (maximalIdeal A) :=
by
  intros x a
  obtain ‚ü®b, hb‚ü© := a
  --obtain ‚ü®z, hz‚ü© := x
  obtain ‚ü®z, hz‚ü© := Submodule.mkQ_surjective (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2)) x
  have : ‚àÉ (z : maximalIdeal A),
    x = Submodule.mkQ (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2)) z := sorry
 -/


section

namespace LocalRing

instance : Module (LocalRing.ResidueField A)
  ((maximalIdeal A) ‚ß∏ (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2))) :=
Module.IsTorsionBySet.module
  (show Module.IsTorsionBySet A _ (maximalIdeal A) by sorry )

/- instance : Module R
  ((maximalIdeal A) ‚ß∏ (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2))) :=
  infer_instance -/

def LocalRingHom.IdealMap {A : Type u} {B : Type v} [CommRing A] [CommRing B] [LocalRing A]
  [LocalRing B] {f : A ‚Üí+* B} (hf : IsLocalRingHom (f : A ‚Üí+* B)) :
    maximalIdeal A ‚Üí+ maximalIdeal B :=
{ toFun := fun (a : maximalIdeal A) ‚Ü¶ ‚ü®f a, sorry‚ü©
  map_zero' := sorry
  map_add' := sorry
}

def RelCotangentSpace {A : Type u} [CommRing A] [LocalRing A] {B : Type v} [CommRing B] 
  [LocalRing B] {f : A ‚Üí+* B} := 
    (maximalIdeal B) ‚ß∏ ((Submodule.comap (Submodule.subtype (maximalIdeal B)) 
    (((maximalIdeal A).map f) ‚äî (maximalIdeal B)^2)))

def TangentSpace (A : Type u) [CommRing A] [LocalRing A] :=
  ((maximalIdeal A) ‚ß∏ (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2)))

instance {A : Type u} [CommRing A] [LocalRing A] :
  AddCommGroup (LocalRing.TangentSpace A) := QuotientAddGroup.Quotient.addCommGroup
    (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2)).toAddSubgroup

instance {A : Type u} [CommRing A] [LocalRing A] :
  Module A (LocalRing.TangentSpace A) := Submodule.Quotient.module
    (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2))

instance {A : Type u} [CommRing A] [LocalRing A] [Algebra R A] :
  Module R (LocalRing.TangentSpace A) := Submodule.Quotient.module'
    (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2))

instance : Module (LocalRing.ResidueField A) (LocalRing.TangentSpace A):=
Module.IsTorsionBySet.module (show Module.IsTorsionBySet A _ (maximalIdeal A) by sorry)

end LocalRing

end
/- instance {A : Type u} [CommRing A] [LocalRing A] [Algebra R A] :
  isScalarTower  (LocalRing.TangentSpace A) := sorry  -/

/- def test {A : Type u} [CommRing A] [LocalRing A] : Module A
  ((maximalIdeal A) ‚ß∏ (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2))) -/

def LocalRingHom.DifferentialGroupHom {A : Type u} {B : Type v} [CommRing A] [CommRing B] [LocalRing A]
  [LocalRing B] {f : A ‚Üí+* B} (hf : IsLocalRingHom f) :
    (LocalRing.TangentSpace A) ‚Üí+ (LocalRing.TangentSpace B) :=
QuotientAddGroup.map
  (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2)).toAddSubgroup
  (comap (Submodule.subtype (maximalIdeal B)) ((maximalIdeal B)^2)).toAddSubgroup
  (LocalRingHom.IdealMap hf)
  (by sorry )

lemma  LocalRingHom.DifferentialGroupHomLinear {A : Type u} {B : Type v} [CommRing A]
  [CommRing B] [LocalRing A] [LocalRing B] [Algebra R A] [Algebra R B]
  {f : A ‚Üí‚Çê[R] B} (hf : IsLocalRingHom (f : A ‚Üí+* B)) (r : R)
  (a : (LocalRing.TangentSpace A)) :
   LocalRingHom.DifferentialGroupHom hf (r ‚Ä¢ a) =
     r ‚Ä¢ (LocalRingHom.DifferentialGroupHom hf a) := by
obtain ‚ü®x, rfl‚ü© := Submodule.mkQ_surjective _ a
rw [Submodule.mkQ_apply, ‚Üê Submodule.Quotient.mk_smul
  (comap (Submodule.subtype (maximalIdeal A)) ((maximalIdeal A)^2)) r x, LocalRingHom.DifferentialGroupHom]
sorry -- this is going to be painful

/- lemma  LocalRingHom.DifferentialGroupHomIsLinearMap {A : Type u} {B : Type v} [CommRing A]
  [CommRing B] [LocalRing A] [LocalRing B] [Algebra R A] [Algebra R B]
  {f : A ‚Üí‚Çê[R] B} (hf : IsLocalRingHom (f : A ‚Üí+* B)) :
  IsLinearMap R (LocalRingHom.DifferentialGroupHom hf) := by
refine ‚ü®fun x y ‚Ü¶ by simp, fun c x ‚Ü¶ LocalRingHom.DifferentialGroupHomLinear hf c x‚ü© -/

def LocalRingHom.DifferentialLinearMap {A : Type u} {B : Type v} [CommRing A]
  [CommRing B] [LocalRing A] [LocalRing B] [Algebra R A] [Algebra R B]
  {f : A ‚Üí‚Çê[R] B} (hf : IsLocalRingHom (f : A ‚Üí+* B)) :
  LocalRing.TangentSpace A ‚Üí‚Çó[R] LocalRing.TangentSpace B :=
LinearMap.mk (LocalRingHom.DifferentialGroupHom hf)
(fun c x ‚Ü¶ LocalRingHom.DifferentialGroupHomLinear hf c x)

section localArtin

variable {R : Type w} [CommRing R] {A : Type u} {B : Type v} [CommRing A]
  [CommRing B] [LocalRing A] [LocalRing B] [Algebra R A] [Algebra R B]  [LocalRing R]

instance : Module (ResidueField R) (TangentSpace A) :=
  Module.IsTorsionBySet.module (show Module.IsTorsionBySet R _ (maximalIdeal R) by sorry)

lemma LocalRingHom.DifferentialGroupHomLinear' {A : Type u} {B : Type v} [CommRing A]
  [CommRing B] [LocalRing A] [LocalRing B] [Algebra R A] [Algebra R B]
  {f : A ‚Üí‚Çê[R] B} (hf : IsLocalRingHom (f : A ‚Üí+* B)) (r : ResidueField R)
  (a : (LocalRing.TangentSpace A)) : LocalRingHom.DifferentialGroupHom hf (r ‚Ä¢ a) =
     r ‚Ä¢ (LocalRingHom.DifferentialGroupHom hf a) := sorry

def LocalRingHom.DifferentialLinearMap' {A : Type u} {B : Type v} [CommRing A]
  [CommRing B] [LocalRing A] [LocalRing B] [Algebra R A] [Algebra R B]
  {f : A ‚Üí‚Çê[R] B} (hf : IsLocalRingHom (f : A ‚Üí+* B)) :
  LocalRing.TangentSpace A ‚Üí‚Çó[ResidueField R] LocalRing.TangentSpace B :=
LinearMap.mk (LocalRingHom.DifferentialGroupHom hf)
(fun c x ‚Ü¶ LocalRingHom.DifferentialGroupHomLinear' hf c x)

lemma LocalRingHom.DifferentialLinearMap'_mkQ {A : Type u} {B : Type v} [CommRing A]
  [CommRing B] [LocalRing A] [LocalRing B] [Algebra R A] [Algebra R B]
  {f : A ‚Üí‚Çê[R] B} (hf : IsLocalRingHom (f : A ‚Üí+* B)) {x : A} (hx : x ‚àà maximalIdeal A) :
LocalRingHom.DifferentialLinearMap' hf (Submodule.mkQ _ ‚ü®x, hx‚ü©) =
  Submodule.mkQ _ ‚ü®f x, show f x ‚àà maximalIdeal B from sorry‚ü© := rfl

end localArtin

variable [LocalRing R]

lemma main‚ÇÅ {f : LocalArtinAlgebraWithFixedResidueHoms A B}
  (hf : Function.Surjective f.func) :
  Function.Surjective (LocalRingHom.DifferentialLinearMap'
    (show (IsLocalRingHom (f.func : A ‚Üí+* B)) from (f.isLocal))) := by
intro z
obtain ‚ü®y, hy‚ü© := Submodule.mkQ_surjective _ z
obtain ‚ü®y', hy'‚ü© := y
obtain ‚ü®x, hx‚ü© := hf y'
have : x ‚àà LocalRing.maximalIdeal A
{ have := (List.TFAE.out (local_hom_TFAE (f.func : A ‚Üí+* B)) 0 4).mp f.isLocal
  rw [‚Üê this, Ideal.mem_comap]
  rw [‚Üê hx] at hy'
  convert hy' }
use Submodule.mkQ _ ‚ü®x, this‚ü©
simp [LocalRingHom.DifferentialLinearMap'_mkQ, hy', hy, hx]
sorry 
done



lemma main‚ÇÇ {f : LocalArtinAlgebraWithFixedResidueHoms A B}
  (hf : Function.Surjective (LocalRingHom.DifferentialLinearMap'
    (show (IsLocalRingHom (f.func : A ‚Üí+* B)) from (f.isLocal)))) :
    Function.Surjective f.func := by
letI : IsLocalRingHom (f.func : A ‚Üí+* B):= sorry
suffices :  Function.Surjective (LocalRing.ResidueField.map (f.func : A ‚Üí+* B))
{ sorry } --Nakayama
sorry



end 
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.Opposites
import Mathlib.CategoryTheory.CommSq


universe u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ w

open CategoryTheory Functor Opposite

variable {S : Type u‚ÇÅ} {C : Type u‚ÇÇ} {D : Type u‚ÇÉ} [Category S] [Category C] [Category D]

def ObjLift (p : C ‚•§ S) (U : S) (x : C) : Prop := p.obj x = U

lemma ObjLift_image (p : C ‚•§ S) (x : C) : ObjLift p (p.obj x) x := rfl

lemma eq_of_ObjLift {p : C ‚•§ S} {U : S} {x : C} (h : ObjLift p U x) : p.obj x = U := h

lemma ObjLiftOpp (p : C ‚•§ S) (U : S) (x : C) : ObjLift p U x ‚Üî ObjLift p.op (op U) (op x) :=
by rw [ObjLift, ObjLift, op_obj, unop_op, op_inj_iff]

--def Hom_of_ObjLift {p : C ‚•§ S} {U : S} (x : C) (hx : ObjLift p U x) :

--lemma eqToHom (U V : C) (h : U = V) : U ‚âÖ V := by rw [h]

/- def HomLift (p : C ‚•§ S) {x y : C} {U V : S} (f : U ‚ü∂ V)
(œÜ : x ‚ü∂ y) (h‚ÇÅ : ObjLift p U x)
(h‚ÇÇ : ObjLift p V y) : Prop := CommSq (p.map œÜ) (ùüô (p.obj x)) (ùüô (p.obj y)) f -/

--lemma HomLiftOpp (p : C ‚•§ S) {x y : C} {U V : S} (f : U ‚ü∂ V) (œÜ : x ‚ü∂ y) (h‚ÇÅ : ObjLift p U x)
--  (h‚ÇÇ : ObjLift p V y) : (HomLift p f œÜ h‚ÇÅ h‚ÇÇ) ‚Üî (Homlift p.op f.op œÜ.op ((ObjLiftOpp p U x).1
--   h‚ÇÅ) ((ObjLiftOpp p V y).1 h‚ÇÇ)) :=
--by sorry

class IsFiberedInGroupoids (p : C ‚•§ S) : Prop where
  (LiftHom {y : C} {X : S} (f : X ‚ü∂ p.obj y) :
    ‚àÉ (x : C) (œÜ : x ‚ü∂ y) (hx : p.obj x = X),
      CommSq (p.map œÜ) (eqToHom hx) (ùüô (p.obj y)) f)
  (IsCartesian {x y z : C} {œÜ : y ‚ü∂ x} {œà : z ‚ü∂ x} {f : p.obj z ‚ü∂ p.obj y}
  (hy : f ‚â´ (p.map œÜ) = p.map œà) :
    ‚àÉ! (œá : z ‚ü∂ y), CommSq f (ùüô (p.obj z)) (ùüô (p.obj y)) (p.map œá))

class IsCofiberedInGroupoids (p : C ‚•§ S) : Prop where
  (LiftHom {x : C} {Y : S} (f : p.obj x ‚ü∂ Y) :
    ‚àÉ (y : C) (œÜ : x ‚ü∂ y) (hy : Y = p.obj y),
      CommSq f (ùüô (p.obj x)) (eqToHom hy) (p.map œÜ))
  (IsCoCartesian {x y z : C} {œÜ : x ‚ü∂ y} {œà : x ‚ü∂ z} {f : p.obj y ‚ü∂ p.obj z}
  (hy : (p.map œÜ) ‚â´ f = p.map œà) :
    ‚àÉ! (œá : y ‚ü∂ z), CommSq (p.map œá) (ùüô (p.obj y)) (ùüô (p.obj z)) f)

-- TODO possibly rewrite proof after making CofiberedInGroupoids "symm" wrt FiberedInGroupoids

lemma IsCofiberedInGroupoidsOpp (p : C ‚•§ S) [hp : IsCofiberedInGroupoids p] :
  IsFiberedInGroupoids p.op :=
by
  rcases hp with ‚ü®hlift, hcart‚ü©
  refine ‚ü®fun f => ?_, fun h_comp => ?_‚ü©
  ¬∑ rcases hlift f.unop with ‚ü®x, œÜ, unop_obj_lift, unop_hom_lift‚ü©
    existsi op x, op œÜ
    rw [‚Üêop_inj_iff, ‚Üêop_obj, op_unop] at unop_obj_lift
    existsi unop_obj_lift.symm
    simpa only [op_obj, unop_op, op_unop, eqToHom_op, op_id, Quiver.Hom.op_unop] using CommSq.op unop_hom_lift
  rcases hcart (Quiver.Hom.op_inj h_comp) with ‚ü®œá, œá_comm, œá_unique‚ü©
  refine ‚ü®œá.op, ‚ü®?_, fun g g_comm => Quiver.Hom.unop_inj ((œá_unique (g.unop)) (CommSq.unop g_comm))‚ü©‚ü©
  simpa only [op_obj, op_map, Quiver.Hom.unop_op, op_obj, Quiver.Hom.op_unop, op_id] using CommSq.op œá_comm

/-
POSSIBLE TODO:
1. Define Fiber category + show its a groupoid
2. Show cats fibered in groupoids form a 2-category
3. Define cat MOR(F, Gz)

-/

class IsFiberedInGroupoidHom (p : C ‚•§ S) (q : D ‚•§ S) (F : C ‚•§ D) : Prop
  where comp : F.comp q = p

--notation:25 p " ‚•§f "  q => IsFiberedInGroupoidHom p q

def IsFiberedInGroupoidHomProp (p : C ‚•§ S) (q : D ‚•§ S) (f : C ‚•§ D) : Prop := f.comp q = p

/- class IsFiberedInGroupoid2HomProp (p : C ‚•§ S) (q : D ‚•§ S) (f g : C ‚•§ D)
  [IsFiberedInGroupoidHom p q f] [IsFiberedInGroupoidHom p q g] (Œ± : f ‚ü∂ g) : Prop where
  proj_eq_id : ‚àÄ (a : C), p.map (Œ±.app a) = ùüô (p.obj a) -/
